int tancong3o()//nếu BOT đã được 3 quân cờ liên tiếp mà chưa bị chặn ở 2 đầu thì sẽ đánh vào 1 trong 2 đầu đó
{
    //for (int i = 0; i < 4; i++) a[i] = 0;
    int x1 = 0, x2 = 0, y1 = 0, y2 = 0;

    //row
    for (int i = 0; i < BOARD_SIZE; i++)
    {
        for (int j = 0; j < BOARD_SIZE; j++)
        {
            if (_A[i][j].c == 1 && _A[i][j + 1].c == 1 && _A[i][j + 2].c == 1)
            {
                if (j - 1 >= 0 && _A[i][j - 1].c == 0 && _A[i][j + 3].c == 0)
                {
                    x1 = _A[i][j - 1].x;
                    y1 = _A[i][j - 1].y;
                    //a[0] = i; a[1] = j - 1;

                }

                if (j + 3 <= 11 && _A[i][j + 3].c == 0 && _A[i][j - 1].c == 0)
                {
                    x2 = _A[i][j + 3].x;
                    y2 = _A[i][j + 3].y;
                    // a[2] = i; a[3] = j + 3;
                }
                if (x1 != 0 && x2 != 0)
                {
                    GotoXY(x1, y1); cout << "O";
                    _A[i][j - 1].c = 1;
                    return 1;
                }
                else
                {
                    x1 = x2 = 0; y1 = y2 = 0;
                }
            }
        }
    }

    //void checkcol1(int& x1, int& y1, int& x2, int& y2)

    for (int j = 0; j < BOARD_SIZE; j++)
    {
        for (int i = 0; i < BOARD_SIZE; i++)
        {
            if (_A[i][j].c == 1 && _A[i + 1][j].c == 1 && _A[i + 2][j].c == 1)
            {
                if (i - 1 >= 0 && _A[i - 1][j].c == 0 && _A[i + 3][j].c == 0)
                {
                    x1 = _A[i - 1][j].x;
                    y1 = _A[i - 1][j].y;
                    // a[0] = i - 1; a[1] = j;

                }

                if (i + 3 <= 11 && _A[i + 3][j].c == 0 && _A[i - 1][j].c == 0)
                {
                    x2 = _A[i + 3][j].x;
                    y2 = _A[i + 3][j].y;
                    //a[2] = i + 3; a[3] = j;
                }

                if (x1 != 0 && x2 != 0)
                {
                    GotoXY(x1, y1); cout << "O";
                    _A[i - 1][j].c = 1;
                    return 1;
                }
                else
                {
                    x1 = x2 = 0; y1 = y2 = 0;
                }
            }

        }
    }
    x1 = x2 = 0; y1 = y2 = 0;
    //void checkcheo11(int& x1, int& y1, int& x2, int& y2)

    for (int k = 0; k < BOARD_SIZE; k++)
    {
        int i = 0, j = k;
        while (j >= 0 && i < BOARD_SIZE)
        {
            if (_A[i][j].c == 1 && _A[i + 1][j - 1].c == 1 && _A[i + 2][j - 2].c == 1)
            {
                if (i - 1 >= 0 && j + 1 <= 11 && _A[i - 1][j + 1].c == 0 && _A[i + 3][j - 3].c == 0)
                {
                    x1 = _A[i - 1][j + 1].x;
                    y1 = _A[i - 1][j + 1].y;
                    // a[0] = i - 1; a[1] = j + 1;
                }


                if (i + 3 <= 11 && j - 3 >= 0 && _A[i + 3][j - 3].c == 0 && _A[i - 1][j + 1].c == 0)
                {
                    x2 = _A[i + 3][j - 3].x;
                    y2 = _A[i + 3][j - 3].y;
                    //a[2] = i + 3; a[3] = j - 3;
                }

                if (x1 != 0 && x2 != 0)
                {
                    GotoXY(x1, y1); cout << "O";
                    _A[i - 1][j + 1].c = 1;
                    return 1;
                }
                else
                {
                    x1 = x2 = 0; y1 = y2 = 0;
                }
            }
            i++;
            j--;
        }
    }
    x1 = x2 = 0; y1 = y2 = 0;
    //void checkcheo22(int& x1, int& y1, int& x2, int& y2)

    for (int k = 1; k < BOARD_SIZE; k++)
    {
        int i = k, j = BOARD_SIZE - 1;
        while (j >= 1 && i < BOARD_SIZE)
        {
            if (_A[i][j].c == 1 && _A[i + 1][j - 1].c == 1 && _A[i + 2][j - 2].c == 1)
            {
                if (i - 1 >= 0 && j + 1 <= 11 && _A[i - 1][j + 1].c == 0 && _A[i + 3][j - 3].c == 0)
                {
                    x1 = _A[i - 1][j + 1].x;
                    y1 = _A[i - 1][j + 1].y;
                    //a[0] = i - 1; a[1] = j + 1;
                }

                if (i + 3 <= 11 && j - 3 >= 0 && _A[i + 3][j - 3].c == 0 && _A[i - 1][j + 1].c == 0)
                {
                    x2 = _A[i + 3][j - 3].x;
                    y2 = _A[i + 3][j - 3].y;
                    // a[2] = i + 3; a[3] = j - 3;
                }

                if (x1 != 0 && x2 != 0)
                {
                    GotoXY(x1, y1); cout << "O";
                    _A[i - 1][j + 1].c = 1;
                    return 1;
                }
                else
                {
                    x1 = x2 = 0; y1 = y2 = 0;
                }
            }
            i++;
            j--;
        }
    }
    x1 = x2 = 0; y1 = y2 = 0;
    //void checkcheo33(int& x1, int& y1, int& x2, int& y2)

    for (int k = BOARD_SIZE - 1; k >= 0; k--)
    {
        int i = k, j = 0;
        while (i < BOARD_SIZE && j < BOARD_SIZE)
        {
            if (_A[i][j].c == 1 && _A[i + 1][j + 1].c == 1 && _A[i + 2][j + 2].c == 1)
            {
                if (i - 1 >= 0 && j - 1 >= 0 && _A[i - 1][j - 1].c == 0 && _A[i + 3][j + 3].c == 0)
                {
                    x1 = _A[i - 1][j - 1].x;
                    y1 = _A[i - 1][j - 1].y;
                    //a[0] = i - 1; a[1] = j - 1;

                }


                if (i + 3 <= 11 && j + 3 <= 11 && _A[i + 3][j + 3].c == 0 && _A[i - 1][j - 1].c == 0)
                {
                    x2 = _A[i + 3][j + 3].x;
                    y2 = _A[i + 3][j + 3].y;
                    //a[2] = i + 3; a[3] = j + 3;

                }
                if (x1 != 0 && x2 != 0)
                {
                    GotoXY(x1, y1); cout << "O";
                    _A[i - 1][j - 1].c = 1;
                    return 1;
                }
                else
                {
                    x1 = x2 = 0; y1 = y2 = 0;
                }
            }
            i++;
            j++;
        }
    }

    x1 = x2 = 0; y1 = y2 = 0;
    //void checkcheo44(int& x1, int& y1, int& x2, int& y2)

    for (int k = 1; k < BOARD_SIZE; k++)
    {
        int i = 0, j = k;
        while (i < BOARD_SIZE && j < BOARD_SIZE)
        {
            if (_A[i][j].c == 1 && _A[i + 1][j + 1].c == 1 && _A[i + 2][j + 2].c == 1)
            {
                if (i - 1 >= 0 && j - 1 >= 0 && _A[i - 1][j - 1].c == 0 && _A[i + 3][j + 3].c == 0)
                {
                    x1 = _A[i - 1][j - 1].x;
                    y1 = _A[i - 1][j - 1].y;
                    // a[0] = i - 1; a[1] = j - 1;

                }

                if (i + 3 <= 11 && j + 3 <= 11 && _A[i + 3][j + 3].c == 0 && _A[i - 1][j - 1].c == 0)
                {
                    x2 = _A[i + 3][j + 3].x;
                    y2 = _A[i + 3][j + 3].y;
                    // a[2] = i + 3; a[3] = j + 3;

                }

                if (x1 != 0 && x2 != 0)
                {
                    GotoXY(x1, y1); cout << "O";
                    _A[i - 1][j - 1].c = 1;
                    return 1;
                }
                else
                {
                    x1 = x2 = 0; y1 = y2 = 0;
                }
            }
            i++;
            j++;
        }
    }

    if (x1 == 0 && x2 == 0 && y1 == 0 && y2 == 0) return 0;
}
